port = 9600

#Custom Foo Protocol Packet
message =  ('01 01 00 08'   #Foo Base Header
            '01 02 00 00'   #Foo Message (31 Bytes)
            '00 00 12 30'   
            '00 00 12 31'
            '00 00 12 32' 
            '00 00 12 33' 
            '00 00 12 34' 
            'D7 CD EF'      #Foo flags
            '00 00 12 35')      

message_byte = '01'
message_byte2 = '12'
message_byte3 = '23'
message_byte4 = '34'
message_byte5 = '45'
message_byte6 = '56'
message_byte7 = '67'
message_byte8 = '78'

"""----------------------------------------------------------------"""
""" Do not edit below this line unless you know what you are doing """
"""----------------------------------------------------------------"""

import sys
import binascii
import os
import random
import numpy as np
from scipy import stats

#Global header for pcap 2.4
pcap_global_header =   ('D4 C3 B2 A1'   
                        '02 00'         #File format major revision (i.e. pcap <2>.4)  
                        '04 00'         #File format minor revision (i.e. pcap 2.<4>)   
                        '00 00 00 00'     
                        '00 00 00 00'     
                        'FF FF 00 00'     
                        '01 00 00 00')

#pcap packet header that must preface every packet
pcap_packet_header =   ('AA 77 9F 47'     
                        '90 A2 04 00'     
                        'XX XX XX XX'   #Frame Size (little endian) 
                        'YY YY YY YY')  #Frame Size (little endian)

eth_header =   ('DE ST MA CA DD RE'     #Dest Mac  
                'SO UR CE MA CA DD'     #Source Mac    
                'PR OT')                #Protocol (0x0800 = IP)

ip_header =    ('45'                    #IP version and header length (multiples of 4 bytes)   
                '00'                      
                'XX XX'                 #Length - will be calculated and replaced later
                '00 00'                   
                '40 00'
                'TL'                    #Time to live
                'PP'                    #Protocol (0x11 = UDP, 0x06 = TCP)          
                'YY YY'                 #Checksum - will be calculated and replaced later      
                '7F 00 00 01'           #Source IP (Default: 127.0.0.1)         
                '7F 00 00 01')          #Dest IP (Default: 127.0.0.1) 

ip6_header =   ('60 00'
                '00 00'
                'XX XX'                 #Length - will be calculated and replaced later
                'PP'                    #Protocol (0x11 = UDP, 0x06 = TCP)    
                'HL'                    #Hop limit, ie time to live
                '00 00 00 00'           #Source IP 
                '00 00 00 00'
                '00 00 00 00'
                '00 00 00 01'
                '00 00 00 00'           #Dest IP 
                '00 00 00 00'
                '00 00 00 00'
                '00 00 00 01')

udp_header =   ('80 01'                   
                'XX XX'                 #Port - will be replaced later                   
                'YY YY'                 #Length - will be calculated and replaced later        
                '00 00')

tcp_header = ('80 01'                   #Src Port
              '80 02'                   #Dst Port
              '00 00 00 00'             #Sequence number
              '00 00 00 00'             #Ack number
              '50'                      #Data offset (default: 5 32-bit words)
              'FL'                      #Flags
              '00 00'                   #Window size
              '00 00'                   #Checksum
              '00 00')                  #Urgent pointer


# PD for Packet Size Distribution ##############
packet_size_pdf = [

    0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  
    0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  
    0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  
    0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  
    0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  
    0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  0.000000,  
    0.000000,  0.000000,  0.000000,  0.000000,  0.286084,  0.000794,  0.005835,  0.001241,  0.000526,  0.000780,  
    0.012442,  0.001587,  0.002112,  0.001764,  0.005690,  0.002438,  0.003693,  0.002472,  0.006448,  0.001958,  
    0.002407,  0.002091,  0.003482,  0.001656,  0.001923,  0.001217,  0.002476,  0.001704,  0.001830,  0.001668,  
    0.004183,  0.002720,  0.001951,  0.002270,  0.001872,  0.001020,  0.001497,  0.000805,  0.001340,  0.000839,  
    0.002121,  0.000711,  0.002616,  0.000640,  0.000939,  0.000932,  0.000729,  0.001188,  0.001066,  0.000578,  
    0.000677,  0.000655,  0.000848,  0.000863,  0.000723,  0.000352,  0.000328,  0.000306,  0.000596,  0.000463,  
    0.000344,  0.000374,  0.000726,  0.000524,  0.000496,  0.000555,  0.000479,  0.000315,  0.000301,  0.000355,  
    0.001952,  0.000371,  0.000374,  0.000337,  0.000634,  0.000291,  0.000291,  0.000528,  0.000529,  0.000435,  
    0.000474,  0.000435,  0.000724,  0.000492,  0.000541,  0.000826,  0.000760,  0.000538,  0.000478,  0.000475,  
    0.000507,  0.000284,  0.000314,  0.000355,  0.000421,  0.001518,  0.000318,  0.000302,  0.003717,  0.000375,  
    0.000718,  0.000828,  0.000582,  0.000329,  0.000508,  0.000804,  0.001152,  0.000651,  0.000382,  0.000415,  
    0.000699,  0.000483,  0.000606,  0.000925,  0.000565,  0.000315,  0.000309,  0.000317,  0.000446,  0.000463,  
    0.000459,  0.000374,  0.000338,  0.000516,  0.000740,  0.000280,  0.000408,  0.000229,  0.000234,  0.000265,  
    0.000517,  0.000351,  0.000399,  0.000649,  0.000668,  0.000573,  0.000240,  0.000291,  0.000358,  0.000240,  
    0.000329,  0.000251,  0.000352,  0.000307,  0.000412,  0.000349,  0.000280,  0.000229,  0.000261,  0.000265,  
    0.001025,  0.000196,  0.000181,  0.000204,  0.000306,  0.000212,  0.000250,  0.000235,  0.000992,  0.000233,  
    0.000245,  0.000345,  0.000261,  0.000214,  0.000184,  0.000221,  0.000313,  0.000384,  0.000211,  0.000309,  
    0.000464,  0.000476,  0.000337,  0.000268,  0.000299,  0.000191,  0.000243,  0.000238,  0.000970,  0.000188,  
    0.000228,  0.000233,  0.002249,  0.000373,  0.000460,  0.000412,  0.000411,  0.000290,  0.000330,  0.000268,  
    0.000396,  0.000242,  0.000220,  0.000160,  0.000189,  0.000191,  0.000414,  0.000510,  0.000327,  0.000217,  
    0.000168,  0.000219,  0.000464,  0.000626,  0.000408,  0.000300,  0.000257,  0.000194,  0.000131,  0.000139,  
    0.000397,  0.000212,  0.000217,  0.000168,  0.000528,  0.000143,  0.000144,  0.000154,  0.000258,  0.000411,  
    0.000625,  0.000420,  0.000275,  0.000278,  0.000459,  0.004001,  0.001258,  0.000777,  0.000553,  0.000305,  
    0.001082,  0.000194,  0.000222,  0.000204,  0.000312,  0.000239,  0.000295,  0.000751,  0.000865,  0.000213,  
    0.000409,  0.000213,  0.000591,  0.000423,  0.000267,  0.000303,  0.000293,  0.000253,  0.000364,  0.000205,  
    0.000223,  0.000247,  0.000255,  0.000343,  0.002420,  0.000227,  0.000217,  0.000209,  0.000285,  0.000215,  
    0.000212,  0.000210,  0.000244,  0.000234,  0.000205,  0.000195,  0.001279,  0.000237,  0.000221,  0.000248,  
    0.000258,  0.000205,  0.000197,  0.000189,  0.000262,  0.002154,  0.006302,  0.000190,  0.000263,  0.000308,  
    0.000234,  0.000223,  0.000298,  0.000248,  0.000216,  0.000299,  0.001264,  0.000262,  0.000268,  0.000253,  
    0.000280,  0.000371,  0.000258,  0.000300,  0.000294,  0.000234,  0.000304,  0.000240,  0.000310,  0.000240,  
    0.000279,  0.000311,  0.000945,  0.000258,  0.000269,  0.000252,  0.000254,  0.000245,  0.000236,  0.000267,  
    0.000314,  0.000238,  0.000364,  0.000229,  0.000283,  0.000303,  0.000255,  0.000278,  0.000446,  0.000250,  
    0.000219,  0.000242,  0.002533,  0.000209,  0.000226,  0.000216,  0.000218,  0.000220,  0.000248,  0.000215,  
    0.000226,  0.000198,  0.000192,  0.000211,  0.000222,  0.000231,  0.000305,  0.000289,  0.005487,  0.000334,  
    0.000229,  0.000218,  0.004780,  0.000186,  0.000317,  0.000195,  0.000767,  0.000189,  0.000206,  0.000203,  
    0.000204,  0.000237,  0.000236,  0.000253,  0.000241,  0.000235,  0.000212,  0.000202,  0.002075,  0.000185,  
    0.000211,  0.000224,  0.000208,  0.000272,  0.000256,  0.000179,  0.000194,  0.000162,  0.000182,  0.000232,  
    0.000195,  0.000188,  0.000246,  0.000212,  0.000218,  0.000228,  0.000233,  0.000196,  0.000282,  0.000199,  
    0.000194,  0.000260,  0.000594,  0.000204,  0.000200,  0.000218,  0.000203,  0.000168,  0.000170,  0.000163,  
    0.000170,  0.000169,  0.000200,  0.000183,  0.000163,  0.000167,  0.000159,  0.000167,  0.000178,  0.000184,  
    0.000162,  0.000141,  0.000246,  0.000237,  0.000247,  0.000224,  0.000357,  0.000165,  0.000171,  0.000159,  
    0.000231,  0.000179,  0.000169,  0.000143,  0.000188,  0.000150,  0.000170,  0.000131,  0.000177,  0.000148,  
    0.000175,  0.000136,  0.000261,  0.000145,  0.000238,  0.000146,  0.000160,  0.000159,  0.000161,  0.000152,  
    0.000147,  0.000152,  0.000155,  0.000141,  0.000164,  0.000139,  0.000347,  0.000224,  0.000229,  0.000180,  
    0.000150,  0.000121,  0.000120,  0.000164,  0.000127,  0.000154,  0.000188,  0.000172,  0.000201,  0.000140,  
    0.000163,  0.000135,  0.000116,  0.000180,  0.000114,  0.000098,  0.000108,  0.000145,  0.000233,  0.000142,  
    0.000146,  0.000180,  0.000130,  0.000166,  0.000112,  0.000097,  0.000256,  0.000147,  0.000128,  0.000183,  
    0.000827,  0.000120,  0.000101,  0.000095,  0.000115,  0.000101,  0.000103,  0.001834,  0.005012,  0.000105,  
    0.000119,  0.000171,  0.000191,  0.000088,  0.000298,  0.000091,  0.000299,  0.000088,  0.000907,  0.000120,  
    0.000102,  0.000089,  0.000124,  0.000337,  0.000110,  0.000087,  0.000089,  0.001677,  0.003376,  0.000075,  
    0.000084,  0.003731,  0.006537,  0.000082,  0.000073,  0.000075,  0.000106,  0.000076,  0.000124,  0.000106,  
    0.056902,  0.000096,  0.000079,  0.000106,  0.000113,  0.000098,  0.000099,  0.000075,  0.000138,  0.000106,  
    0.000237,  0.000142,  0.000930,  0.000097,  0.000150,  0.000144,  0.000614,  0.000152,  0.000091,  0.000075,  
    0.000149,  0.000071,  0.000066,  0.000091,  0.064117,  0.000086,  0.000054,  0.000083,  0.000057,  0.000053,  
    0.000060,  0.000052,  0.000056,  0.000060,  0.000537,  0.000142,  0.000086,  0.000051,  0.000070,  0.000043,  
    0.000051,  0.000048,  0.000079,  0.000056,  0.000088,  0.000045,  0.000076,  0.000048,  0.000089,  0.000046,  
    0.000056,  0.000039,  0.000066,  0.000039,  0.000050,  0.000033,  0.001703,  0.000040,  0.000048,  0.000051,  
    0.000050,  0.000041,  0.000080,  0.000049,  0.000070,  0.000042,  0.000049,  0.000042,  0.000294,  0.000039,  
    0.000054,  0.000060,  0.000194,  0.000039,  0.000144,  0.000850,  0.006170,  0.000080,  0.000081,  0.000084,  
    0.000083,  0.000070,  0.000059,  0.000057,  0.000074,  0.000046,  0.000082,  0.000052,  0.000253,  0.000055,  
    0.000050,  0.000046,  0.000091,  0.000043,  0.000066,  0.000057,  0.000133,  0.000058,  0.000046,  0.000057,  
    0.000103,  0.000034,  0.000040,  0.000050,  0.000601,  0.000059,  0.000057,  0.000057,  0.000057,  0.000042,  
    0.000065,  0.000032,  0.000061,  0.000036,  0.000047,  0.000050,  0.000102,  0.000043,  0.000046,  0.000040,  
    0.000102,  0.000029,  0.000035,  0.000038,  0.000073,  0.000047,  0.000073,  0.000041,  0.000069,  0.000040,  
    0.000056,  0.000040,  0.000028,  0.000036,  0.000032,  0.000041,  0.000497,  0.000048,  0.000040,  0.000034,  
    0.000037,  0.000040,  0.000040,  0.000034,  0.000075,  0.000033,  0.000028,  0.000030,  0.000327,  0.000031,  
    0.000063,  0.000030,  0.000544,  0.000029,  0.000030,  0.000037,  0.000036,  0.000036,  0.000043,  0.000031,  
    0.000030,  0.000047,  0.000031,  0.000029,  0.000036,  0.000038,  0.000027,  0.000064,  0.000040,  0.000029,  
    0.000044,  0.000032,  0.000037,  0.000034,  0.000025,  0.000068,  0.000084,  0.000052,  0.000033,  0.000042,  
    0.000026,  0.000038,  0.000027,  0.000041,  0.000029,  0.000044,  0.000035,  0.000037,  0.000116,  0.000030,  
    0.000031,  0.000030,  0.000039,  0.000037,  0.000062,  0.000042,  0.000044,  0.000039,  0.000169,  0.000026,  
    0.000039,  0.000034,  0.000029,  0.000041,  0.000029,  0.000029,  0.000034,  0.000047,  0.000040,  0.000028,  
    0.000051,  0.000035,  0.000042,  0.000032,  0.000035,  0.000039,  0.000062,  0.000039,  0.000546,  0.000044,  
    0.000090,  0.000031,  0.000041,  0.000050,  0.000041,  0.000036,  0.000039,  0.000037,  0.000071,  0.000043,  
    0.000040,  0.000046,  0.000058,  0.000030,  0.000038,  0.000035,  0.000057,  0.000035,  0.000032,  0.000051,  
    0.000049,  0.000030,  0.000032,  0.000046,  0.000037,  0.000034,  0.000032,  0.000040,  0.010109,  0.000026,  
    0.000029,  0.000019,  0.000024,  0.000039,  0.000030,  0.000035,  0.000062,  0.000025,  0.000030,  0.000051,  
    0.000036,  0.000038,  0.000033,  0.000034,  0.000037,  0.000028,  0.000025,  0.000025,  0.000031,  0.000026,  
    0.000030,  0.000028,  0.000025,  0.000022,  0.000023,  0.000022,  0.000032,  0.000027,  0.000034,  0.000027,  
    0.000030,  0.000024,  0.000033,  0.000032,  0.000029,  0.000026,  0.000030,  0.000027,  0.000045,  0.000025,  
    0.000047,  0.000036,  0.000034,  0.000035,  0.000037,  0.000023,  0.000033,  0.000025,  0.000028,  0.000034,  
    0.000386,  0.000030,  0.000029,  0.000029,  0.000033,  0.000035,  0.000035,  0.000027,  0.000031,  0.000040,  
    0.000035,  0.000021,  0.000030,  0.000027,  0.000028,  0.000031,  0.000031,  0.000032,  0.000028,  0.000025,  
    0.000038,  0.000027,  0.000027,  0.000025,  0.000044,  0.000029,  0.000046,  0.000035,  0.000025,  0.000039,  
    0.000032,  0.000045,  0.000033,  0.000035,  0.000031,  0.000024,  0.000040,  0.000031,  0.000047,  0.000032,  
    0.000048,  0.000029,  0.000031,  0.000025,  0.000032,  0.000046,  0.000112,  0.000131,  0.000073,  0.000032,  
    0.000025,  0.000029,  0.000031,  0.000028,  0.000030,  0.000048,  0.000048,  0.000030,  0.000023,  0.000022,  
    0.000189,  0.000035,  0.000026,  0.000025,  0.000083,  0.000026,  0.000030,  0.000098,  0.000030,  0.000048,  
    0.000030,  0.000026,  0.000062,  0.000033,  0.000022,  0.000047,  0.000035,  0.000034,  0.000024,  0.000054,  
    0.006077,  0.000026,  0.000030,  0.000024,  0.000040,  0.000033,  0.000083,  0.000022,  0.000033,  0.000023,  
    0.000023,  0.000028,  0.000028,  0.000026,  0.000038,  0.000025,  0.000026,  0.000036,  0.000065,  0.000028,  
    0.000040,  0.000146,  0.000037,  0.000025,  0.000028,  0.000022,  0.000023,  0.000030,  0.000418,  0.000032,  
    0.000024,  0.000024,  0.000059,  0.000026,  0.000040,  0.000022,  0.000028,  0.000027,  0.000025,  0.000027,  
    0.000047,  0.000025,  0.000028,  0.000027,  0.000033,  0.000030,  0.000031,  0.000021,  0.000031,  0.000030,  
    0.000057,  0.000033,  0.000027,  0.000043,  0.000028,  0.000032,  0.000033,  0.000041,  0.000034,  0.000075,  
    0.000090,  0.000027,  0.000027,  0.000026,  0.000088,  0.000033,  0.000029,  0.000027,  0.000134,  0.000026,  
    0.000033,  0.000028,  0.000052,  0.000034,  0.001527,  0.000035,  0.000034,  0.000027,  0.000033,  0.000031,  
    0.000144,  0.000030,  0.000049,  0.000026,  0.000048,  0.000026,  0.000030,  0.000032,  0.000060,  0.000033,  
    0.000033,  0.000032,  0.000242,  0.000032,  0.000042,  0.000043,  0.000114,  0.000030,  0.000215,  0.000031,  
    0.000086,  0.000038,  0.000043,  0.000052,  0.000049,  0.000039,  0.000037,  0.000049,  0.000071,  0.000050,  
    0.000047,  0.000039,  0.000037,  0.000040,  0.000039,  0.000042,  0.000046,  0.000050,  0.000047,  0.000045,  
    0.002477,  0.000040,  0.000044,  0.000058,  0.000056,  0.000046,  0.000067,  0.000050,  0.000059,  0.000048,  
    0.000058,  0.000063,  0.001402,  0.000051,  0.000056,  0.000061,  0.001114,  0.000051,  0.000108,  0.000052,  
    0.000073,  0.000057,  0.000045,  0.000041,  0.000037,  0.000053,  0.000033,  0.000027,  0.000035,  0.000016,  
    0.000019,  0.000029,  0.000027,  0.000028,  0.000021,  0.000023,  0.000026,  0.000014,  0.000028,  0.000023,  
    0.000030,  0.000019,  0.000079,  0.000022,  0.000061,  0.000026,  0.000018,  0.000036,  0.000043,  0.000022,  
    0.000021,  0.000019,  0.000022,  0.000039,  0.000020,  0.000026,  0.000019,  0.000020,  0.000021,  0.000016,  
    0.000023,  0.000019,  0.000033,  0.000020,  0.000031,  0.000021,  0.000033,  0.000023,  0.000029,  0.000021,  
    0.000026,  0.000022,  0.000034,  0.000028,  0.000047,  0.000022,  0.000164,  0.000022,  0.000021,  0.000035,  
    0.000027,  0.000020,  0.000099,  0.000040,  0.000036,  0.000025,  0.000023,  0.000023,  0.000047,  0.000034,  
    0.000018,  0.000038,  0.000027,  0.000023,  0.000026,  0.000018,  0.000022,  0.000026,  0.000022,  0.000022,  
    0.000115,  0.000021,  0.000019,  0.000030,  0.000028,  0.000020,  0.000021,  0.000020,  0.000025,  0.000025,  
    0.000020,  0.000023,  0.000032,  0.000024,  0.000029,  0.000025,  0.000022,  0.000022,  0.000029,  0.000026,  
    0.000038,  0.000023,  0.000030,  0.000025,  0.001717,  0.000034,  0.000025,  0.000023,  0.000033,  0.000028,  
    0.000027,  0.000025,  0.000022,  0.000031,  0.000032,  0.000026,  0.000031,  0.000024,  0.000026,  0.000015,  
    0.000025,  0.000020,  0.000022,  0.000035,  0.000037,  0.000025,  0.000020,  0.000019,  0.009937,  0.000018,  
    0.000023,  0.000018,  0.000028,  0.000021,  0.000099,  0.000019,  0.000027,  0.000024,  0.000023,  0.000033,  
    0.000087,  0.000026,  0.000034,  0.000027,  0.003750,  0.000041,  0.000137,  0.000092,  0.000050,  0.000021,  
    0.000030,  0.000022,  0.000028,  0.000016,  0.000032,  0.000022,  0.000021,  0.000040,  0.000029,  0.000018,  
    0.000039,  0.000024,  0.000195,  0.000022,  0.000059,  0.000027,  0.000033,  0.000019,  0.000029,  0.000019,  
    0.000021,  0.000018,  0.000039,  0.000022,  0.000037,  0.000018,  0.000023,  0.000018,  0.000037,  0.000023,  
    0.000040,  0.000017,  0.000050,  0.000030,  0.000469,  0.000029,  0.000030,  0.000018,  0.000035,  0.000026,  
    0.000034,  0.000016,  0.000029,  0.000022,  0.000021,  0.000021,  0.000022,  0.000023,  0.000035,  0.000025,  
    0.000026,  0.000094,  0.000032,  0.000039,  0.000029,  0.000041,  0.000036,  0.000028,  0.000032,  0.000019,  
    0.000027,  0.000019,  0.000023,  0.000014,  0.000018,  0.000031,  0.000022,  0.000022,  0.000040,  0.000023,  
    0.000045,  0.000021,  0.000031,  0.000025,  0.000036,  0.000022,  0.000029,  0.000044,  0.000545,  0.000251,  
    0.000043,  0.000021,  0.000025,  0.000018,  0.000021,  0.000019,  0.000034,  0.000027,  0.000022,  0.000029,  
    0.000026,  0.000023,  0.000031,  0.000043,  0.000032,  0.000027,  0.000016,  0.000043,  0.000069,  0.000024,  
    0.000021,  0.000017,  0.000021,  0.000031,  0.000025,  0.000051,  0.000015,  0.000022,  0.000021,  0.000023,  
    0.000023,  0.000020,  0.000015,  0.000028,  0.000081,  0.000023,  0.000129,  0.000020,  0.000028,  0.000024,  
    0.000021,  0.000017,  0.000020,  0.000026,  0.000018,  0.000017,  0.000019,  0.000017,  0.000015,  0.000017,  
    0.000024,  0.000017,  0.000068,  0.000022,  0.000019,  0.000028,  0.000014,  0.000023,  0.000021,  0.000020,  
    0.000025,  0.000028,  0.000019,  0.000033,  0.000211,  0.000017,  0.000064,  0.000028,  0.000023,  0.000019,  
    0.000020,  0.000020,  0.000017,  0.000019,  0.000035,  0.000022,  0.000032,  0.000025,  0.000023,  0.000016,  
    0.000015,  0.000026,  0.000023,  0.000021,  0.000199,  0.000022,  0.000031,  0.000018,  0.000021,  0.000026,  
    0.000050,  0.000022,  0.000069,  0.000041,  0.000021,  0.000014,  0.000024,  0.000045,  0.000135,  0.000019,  
    0.000022,  0.000021,  0.000022,  0.000023,  0.000023,  0.000021,  0.000023,  0.000017,  0.000016,  0.000023,  
    0.000021,  0.000012,  0.000032,  0.000014,  0.000028,  0.000036,  0.000033,  0.000051,  0.000097,  0.000018,  
    0.000019,  0.000015,  0.000017,  0.000025,  0.000048,  0.000020,  0.000019,  0.000019,  0.000015,  0.000022,  
    0.000024,  0.000019,  0.000023,  0.000021,  0.000039,  0.000017,  0.000018,  0.000016,  0.000062,  0.000017,  
    0.000019,  0.000021,  0.000123,  0.000038,  0.000038,  0.000015,  0.000030,  0.000019,  0.000028,  0.000034,  
    0.000594,  0.000042,  0.000040,  0.000026,  0.000090,  0.000048,  0.000144,  0.000106,  0.000163,  0.000028,  
    0.000028,  0.000020,  0.000019,  0.000023,  0.000044,  0.000020,  0.000040,  0.000022,  0.000039,  0.000032,  
    0.000162,  0.000029,  0.000017,  0.000022,  0.000427,  0.000019,  0.000051,  0.000113,  0.001307,  0.000020,  
    0.000019,  0.000026,  0.000058,  0.000026,  0.000056,  0.000025,  0.001062,  0.000036,  0.000066,  0.000019,  
    0.000761,  0.000036,  0.000095,  0.000096,  0.000437,  0.000300,  0.000050,  0.000053,  0.200392 
]


#####################################################################  

              

def getByteLength(str1):
    return len(''.join(str1.split())) / 2

def writeByteStringToFile(bytestring, filename):
    bytelist = bytestring.split()  
    bytes = binascii.a2b_hex(''.join(bytelist))

    if (os.path.isfile(filename)):
        bitout = open(filename, 'wb') 
        bitout.write(bytes)
        bitout.close()
    else:
        bitout = open(filename, 'a')
        bitout.write(bytes)
        bitout.close()

    
def writeToPCAP(bytestring, pcapfile):
    writeByteStringToFile(bytestring, pcapfile)

def generatePCAP(message,port,pcapfile,num_pkt): 

    # remove original pcap file to overwrite
    if (os.path.isfile(pcapfile)):
        os.remove(pcapfile)

    bytestring = generateGlobalHeader()
    for x in range(0,num_pkt):
        bytestring += generatePacket(message,port)
        
    writeToPCAP(bytestring, pcapfile)


def generateGlobalHeader():
    return pcap_global_header

#Generate a packet
def generatePacket(message,port):

    packet_size_list = np.arange(1519)
    packet_size_dist = stats.rv_discrete(name='dist',values=(packet_size_list,packet_size_pdf))

    # Packet Payload
    # packet_size = packet_size_dist.rvs()
    # packet_size = 512
    payload = ''
    #for x in range(0, packet_size-54):
    #for x in range(0, 512):
    #    payload += message_byte

    for x in range (0, 64):
        payload += message_byte

    for x in range (0,64):
        payload += message_byte2

    for x in range (0,64):
        payload += message_byte3

    for x in range (0,64):
        payload += message_byte4

    for x in range (0,64):
        payload += message_byte5

    for x in range (0,64):
        payload += message_byte6

    for x in range (0,64):
        payload += message_byte7

    for x in range (0,64):
        payload += message_byte8


    #print 'Attempting to generate packet of size ', packet_size

    #LAYER 4
    tcp = tcp_header
    if (random.random() > 1.0):
        # increase size to ensure at least 64 byte packet
        #for x in range(0,12):
        #    payload += message_byte
        udp = udp_header.replace('XX XX',"%04x"%port)
        udp_len = getByteLength(payload) + getByteLength(udp_header)
        udp = udp.replace('YY YY',"%04x"%udp_len)
        layer4 = udp
    else:
        if (random.random() > 0.9):
            tcp = tcp.replace('FL',"02") # 10% of packets are requests for connection
        else:
            tcp = tcp.replace('FL',"00")
        layer4 = tcp

    #LAYER 3
    ip = ''
    ip_version = 0
    if (random.random() >= 0):
        ip_version = 4
        ip_len =  getByteLength(payload) + getByteLength(layer4) + getByteLength(ip_header)
        ip = ip_header.replace('XX XX',"%04x"%ip_len)
        if (layer4 == tcp):
            ip = ip.replace('PP',"06")
        elif (layer4 == udp):
            ip = ip.replace('PP',"11")
        else:
            print 'Error'
            exit(0)
        ttl = int(random.random()*19) + 2 # change to + 1 in order to allow TTL dropping
        ip = ip.replace('TL',"%02x"%ttl)
        checksum = ip_checksum(ip.replace('YY YY','00 00'))
        ip = ip.replace('YY YY',"%04x"%checksum)
    else:
        ip_version = 6
        ip_len =  getByteLength(payload) + getByteLength(layer4) + getByteLength(ip6_header)
        ip = ip6_header.replace('XX XX',"%04x"%ip_len)
        if (layer4 == tcp):
            ip = ip.replace('PP',"06")
        elif (layer4 == udp):
            ip = ip.replace('PP',"11")
        else:
            print 'Error'
            exit(0)
        ttl = int(random.random()*19) + 2 # change to + 1 in order to allow TTL dropping
        ip = ip.replace('HL',"%02x"%ttl)

    layer3 = ip;


    #LAYER 2
    layer2 = eth_header.replace('SO UR CE MA CA DD','1A 2B 3C 4D 5E 6F') # src MAC
    layer2 = layer2.replace('DE ST MA CA DD RE','A1 B2 C3 D4 E5 F6') # dest MAC

    if (random.random() > 0.7): # VLAN tag
        layer2 = layer2.replace('PR OT','81 00')
        layer2 += '00 00' # rest of VLAN tag (PCP,DEI,VID)
        if (ip_version == 4):
            layer2 += '08 00' # ethertype for layer 3
        if (ip_version == 6):
            layer2 += '86 DD'
    else: # no VLAN tag
        if (ip_version == 4):
            layer2 = layer2.replace('PR OT','08 00')
        if (ip_version == 6):
            layer2 = layer2.replace('PR OT','86 DD')
    
    pcap_len = ip_len + getByteLength(layer2)
    hex_str = "%08x"%pcap_len
    reverse_hex_str = hex_str[6:] + hex_str[4:6] + hex_str[2:4] + hex_str[:2]
    pcaph = pcap_packet_header.replace('XX XX XX XX',reverse_hex_str)
    pcaph = pcaph.replace('YY YY YY YY',reverse_hex_str)

    if (pcap_len < 64 or pcap_len > 1522):
        print 'Error: Generated packet of illegal size (',pcap_len,'B)'
        exit(0)
        

    return pcaph + layer2 + layer3 + layer4 + payload

#Splits the string into a list of tokens every n characters
def splitN(str1,n):
    return [str1[start:start+n] for start in range(0, len(str1), n)]

#Calculates and returns the IP checksum based on the given IP Header
def ip_checksum(iph):

    #split into bytes    
    words = splitN(''.join(iph.split()),4)

    csum = 0;
    for word in words:
        csum += int(word, base=16)

    csum += (csum >> 16)
    csum = csum & 0xFFFF ^ 0xFFFF

    return csum


"""------------------------------------------"""
""" End of functions, execution starts here: """
"""------------------------------------------"""

if len(sys.argv) < 2:
    print 'usage: pcapgen.py output_file [num_packets]'
    exit(0)

if (sys.argv[1] == "temp.pcap" or sys.argv[1] == "merge.pcap"):
    print 'output file cannot be named temp.pcap nor merge.pcap'
    exit(0)

num_pkt = 100
if (len(sys.argv) == 3):
    num_pkt = int(sys.argv[2])

generatePCAP(message,port,sys.argv[1],num_pkt)  
