/*
 * funcion : noc writer takes packets from afifo 
 *           writes them to the noc input port
 *           handles credits and selects vc
 * author  : Mohamed S. Abdelfattah
 * date    : 26-AUG-2014
 */

module noc_writer_old
#(
	parameter WIDTH  = 16,
	parameter N      = 16,
	parameter NUM_VC = 2,
	parameter DEPTH_PER_VC = 10
)
(
	input wire clk,
	input wire rst,

	//read port
	input  wire [WIDTH-1:0] i_data_in,
	input  wire             i_ready_in,
	output reg              i_read_en,

	//write port
	output reg [WIDTH-1:0]  o_flit_out,
	input      [NUM_VC-1:0] o_credits_in
);


//local parameters
localparam CREDIT_COUNT_WIDTH = $clog2(DEPTH_PER_VC);
localparam ADDRESS_WIDTH = $clog2(N);
localparam VC_ADDRESS_WIDTH = $clog2(NUM_VC);
localparam VALID_POS = WIDTH-1;
localparam HEAD_POS = WIDTH-2;
localparam TAIL_POS = WIDTH-3;
localparam VC_POS = WIDTH-4;
localparam DEST_POS = WIDTH-4-VC_ADDRESS_WIDTH;
localparam DATA_POS = WIDTH-4-ADDRESS_WIDTH-VC_ADDRESS_WIDTH;


//credit tracking
reg [CREDIT_COUNT_WIDTH:0] credit_count [0:NUM_VC-1];

//output valid and vc
reg [VC_ADDRESS_WIDTH-1:0] assigned_vc;
reg [CREDIT_COUNT_WIDTH-1:0] max_credits;
reg valid_out, vc_available, possible_data_received;

//loop variable
int i;

//-------------------------------------------------------------------------------
// Implementation
//-------------------------------------------------------------------------------

//counters that keep track of downstream buffer space availability
always @ (posedge clk)
begin

	//init to # of buffer spaces
	if(rst)
		for(i=0;i<NUM_VC;i++)
			credit_count[i] <= DEPTH_PER_VC;
	
	else
	begin

		//increment whenever we get a credit
		for(i=0;i<NUM_VC;i++)
			if(o_credits_in[i] )
				credit_count[i] <= credit_count[i] + 1;

		//decrement whenever we send a flit
		for(i=0;i<NUM_VC;i++)
			if(valid_out & (i==assigned_vc))
				credit_count[i] <= credit_count[i] - 1;
	end
	
end

//delay the i_ready_in signal for 1 cycle
//to reflect when we actually get the data 
//from the afifo
always @ (posedge clk)
	possible_data_received <= i_ready_in; 

//we read when a vc is available and the fifo isn't empty
assign i_read_en = vc_available & i_ready_in;
assign vc_available = ~(credit_count[assigned_vc] == 0);
assign valid_out = possible_data_received & vc_available;

//assign the output VC
always @ (posedge clk)
begin
	
	if(rst)
	begin
		//vc_available <= 1'b0;
		max_credits <= 0;
		assigned_vc <= 0;
	end

	else
	begin
			
		//update assigned VC when we see a tail flit
		//and we actually eject it
		if(i_data_in[TAIL_POS] & valid_out)
		begin
			assigned_vc = 0;
			max_credits = 0;
			for(i=0;i<NUM_VC;i++)
			begin
				//find the best candidate VC (the one with most credits)
				if( (credit_count[i] > max_credits) )
				begin
					max_credits = credit_count[i];
					assigned_vc = i;
				end
			end // of loop
		end

	end

end

//combinationally set the output
assign o_flit_out = i_data_in[HEAD_POS] ? 
					{valid_out,
					 i_data_in[HEAD_POS],
					 i_data_in[TAIL_POS],
					 assigned_vc,
					 i_data_in[DEST_POS -: ADDRESS_WIDTH],
					 i_data_in[DATA_POS : 0]} 
				  : {valid_out,
					 i_data_in[HEAD_POS],
					 i_data_in[TAIL_POS],
					 assigned_vc,
				     i_data_in[DEST_POS:0]};


endmodule
